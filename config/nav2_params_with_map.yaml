amcl:
  ros__parameters:
    use_sim_time: false
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.1
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 5                 # most indoor LiDARs covers 10–30m max
    laser_min_range: 0.4
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10        # bt_loop_duration sets how often (in seconds) the behavior tree ticks. Lower values = faster response. Higher values = slower updates. Recommended: 0.05 - 0.2. Default: 0.1
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: false

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: false
      
controller_server:
  ros__parameters:
    use_sim_time: false
    controller_frequency: 100.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 1.0 # max [s] that the system is failed but continues without changing to the failed state
    progress_checker_plugins: "progress_checker" # progress_checker_plugin: "progress_checker" For Humble and older
    goal_checker_plugins: ["general_goal_checker"]  # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1      # Minimum movement to consider progress [m]
      movement_time_allowance: 10.0      # Max time allowed without movement [s]
    general_goal_checker:
      stateful: true
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.5    # Robot must be within 0.5 meters of the goal position
      yaw_goal_tolerance: 6.28  # ~2π radians = 360°, so orientation doesn't matter
    # regulated pure pursuit param
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.5   # Desired cruise speed [m/s], tuned below max (3.56 m/s)
      lookahead_dist: 1.6       # Fallback static lookahead distance [m]
      min_lookahead_dist: 0.8   # Minimum lookahead distance for path following [m]
      max_lookahead_dist: 3.0   # Maximum lookahead distance [m]
      lookahead_time: 1.5       # Lookahead distance scales with this time [s]
      rotate_to_heading_angular_vel: 1.8
      transform_tolerance: 0.1
      use_velocity_scaled_lookahead_dist: true      # Enables dynamic lookahead adjustment
      min_approach_linear_velocity: 0.05            # Minimum speed near goal [m/s]
      approach_velocity_scaling_dist: 1.5           # Distance to goal where slowdown begins [m]
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 1.0
      use_regulated_linear_velocity_scaling: true   # Reduce speed in tight curvature
      use_fixed_curvature_lookahead: false
      curvature_lookahead_dist: 0.25
      use_cost_regulated_linear_velocity_scaling: false
      regulated_linear_scaling_min_radius: 0.9     # Min radius to trigger velocity reduction
      regulated_linear_scaling_min_speed: 0.25     # Minimum speed when regulating [m/s]
      use_rotate_to_heading: false                 # Disables in-place rotation (required by RMP 401)
      allow_reversing: true                        # Allow reversing when needed
      #rotate_to_heading_min_angle: 0.785
      max_angular_vel: 2.0                         # Max steering rate [rad/s] — matches hardware
      max_angular_accel: 0.1
      max_linear_vel: 0.3
      max_linear_accel: 0.1                        # Max linear acceleration [m/s²]
      max_robot_pose_search_dist: 5.0
      stateful: true

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 2.0
      publish_frequency: 1.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: false
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      #robot_radius: 0.22
      footprint: "[[0.336, 0.308], [0.336, -0.308], [-0.336, -0.308], [-0.336, 0.308]]"
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.0
        inflation_radius: 0.4
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: true
        publish_voxel_map: true
        origin_z: 0.0
        z_resolution: 0.01
        z_voxels: 10
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: true
          marking: true
          data_type: "LaserScan"
          raytrace_max_range: 2.0
          raytrace_min_range: 0.0
          obstacle_max_range: 1.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
      always_send_full_costmap: true
      
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 5.0       # How often costmap updates [Hz]
      publish_frequency: 1.0      # How often to publish costmap [Hz]
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: false
      #robot_radius: 0.28
      footprint: "[[0.336, 0.308], [0.336, -0.308], [-0.336, -0.308], [-0.336, 0.308]]"  # Robot shape in meters
      resolution: 0.05            # Costmap resolution [m/cell]
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: true
          marking: true
          data_type: "LaserScan"
          raytrace_max_range: 2.0
          raytrace_min_range: 0.0
          obstacle_max_range: 1.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.0                # Steepness of inflation cost dropoff
        inflation_radius: 0.4                   # Safety buffer around obstacles [m]
      always_send_full_costmap: true


map_saver:
  ros__parameters:
    use_sim_time: false
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: true
    yaml_filename: ""
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.

planner_server:
  ros__parameters:
    expected_planner_frequency: 1.0
    use_sim_time: false
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid" # In Iron and older versions, "/" was used instead of "::"
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      tolerance: 0.25                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
      allow_unknown: true                 # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
      max_planning_time: 5.0              # max time in s for planner to plan, smooth
      motion_model_for_search: "REEDS_SHEPP"  # Allows forward/reverse arcs (no in-place rotation)  REEDS_SHEPP DUBIN
      angle_quantization_bins: 8         # Number of angle bins for search default 72 , iput 8 for 42 turing angel
      analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
      analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
      analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
      minimum_turning_radius: 1.4        # minimum turning radius in m of path / vehicle
      reverse_penalty: 1.0                # Penalty to apply if motion is reversing, must be => 1
      change_penalty: 1.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
      non_straight_penalty: 1.4           # Penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 1.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.015
      lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: true     # Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      debug_visualizations: true         # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
      use_quadratic_cost_penalty: false
      downsample_obstacle_heuristic: true
      allow_primitive_interpolation: false
      coarse_search_resolution: 4         # Number of bins to skip when doing a coarse search for the path. Only used for all_direction goal heading mode.
      goal_heading_mode: "ALL_DIRECTION"        # DEFAULT, BIDIRECTIONAL, ALL_DIRECTION
      smooth_path: true                   # If true, does a simple and quick smoothing post-processing to the path
      
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10
        do_refinement: true
        refinement_num: 2
        
behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]  # List of enabled behavior plugins for recovery or task behaviors
    spin:
      plugin: "nav2_behaviors/Spin"     # Plugin that rotates the robot in place (used for recovery behaviors)
    backup:
      plugin: "nav2_behaviors/BackUp"            # Plugin that moves the robot backward safely (often used in recovery)
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"    # Drives the robot in a fixed heading, used in recovery
    wait:
      plugin: "nav2_behaviors/Wait"              # Plugin that lets the robot wait for a duration (e.g., for safety, traffic)
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"    # Enables semi-manual control by a human, with some autonomy 
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: false
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0     # [rad/s] Maximum rotational velocity the behavior can command
    min_rotational_vel: 0.4     # [rad/s] Minimum rotational velocity the behavior can command (used to prevent stalling)
    rotational_acc_lim: 3.2     # [rad/s^2] Maximum allowable rotational acceleration

robot_state_publisher:
  ros__parameters:
    use_sim_time: false

waypoint_follower:
  ros__parameters:
    use_sim_time: false
    loop_rate: 20                   # [Hz] Frequency at which the waypoint follower checks and commands movement
    stop_on_failure: false          # If true, the follower stops execution when a waypoint or task fails / if false, it will attempt to continue to the next waypoint
    waypoint_task_executor_plugin: "wait_at_waypoint"    # Specifies the plugin used to execute a task at each waypoint
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: true
      waypoint_pause_duration: 200      # [ms] Duration to pause at each waypoint before continuing

velocity_smoother:
  ros__parameters:
    use_sim_time: false
    smoothing_frequency: 20.0
    scale_velocities: False              # If true, scales target velocities dynamically based on feedback; typically false in open loop
    feedback: "OPEN_LOOP"                # Type of control loop: "OPEN_LOOP" ignores odom feedback, "CLOSED_LOOP" uses it for smoothing
    max_velocity: [0.2, 0.0, 0.1]       # Max allowed velocity [x, y, theta]; use robot's actual max for safety  x: forward speed, y: lateral speed (usually 0), theta: angular speed
    min_velocity: [-0.2, 0.0, -0.1]     # Min allowed velocity in reverse/negative direction
    max_accel: [0.1, 0.0, 0.1]           # Maximum acceleration limits [x, y, theta] in m/s² and rad/s²
    max_decel: [-0.1, 0.0, -0.1]         # Maximum deceleration limits [x, y, theta]
    odom_topic: "odom"
    odom_duration: 0.1                   # [sec] Duration window for averaging odometry feedback; affects smoothing response
    deadband_velocity: [0.0, 0.0, 0.0]   # Velocities within this range are considered zero to avoid noise triggering motion
    velocity_timeout: 1.0                # [sec] If no command is received within this time, the robot stops to prevent runaway
